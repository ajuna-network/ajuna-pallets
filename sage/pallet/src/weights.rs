// Ajuna Node
// Copyright (C) 2022 BlogaTech AG

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_ajuna_nft_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-22, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `weight-calculation-didac`, CPU: `DO-Regular`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/bajun-para
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-ajuna-nft-staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/ajuna-nft-staking/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ajuna_nft_staking.
pub trait WeightInfo {
    fn state_transition() -> Weight;
    fn transition_one() -> Weight;
}

/// Weights for pallet_ajuna_nft_staking using the Substrate node and recommended hardware.
pub struct AjunaWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for AjunaWeight<T> {
    fn state_transition() -> Weight {
        // Minimum execution time: 26_582 nanoseconds.
        Weight::from_parts(0, 0)
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }

    fn transition_one() -> Weight {
        // Minimum execution time: 26_582 nanoseconds.
        Weight::from_parts(0, 0)
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
}

impl WeightInfo for () {
    fn state_transition() -> Weight {
        // Minimum execution time: 26_582 nanoseconds.
        Weight::from_parts(0, 0)
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }

    fn transition_one() -> Weight {
        // Minimum execution time: 26_582 nanoseconds.
        Weight::from_parts(0, 0)
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
}

