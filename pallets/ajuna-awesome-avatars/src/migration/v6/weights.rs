// This file is part of Substrate.

// Copyright (C) Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_example_mbm`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-03-26, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Olivers-MBP`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// polkadot-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// target/release/wbuild/kitchensink-runtime/kitchensink_runtime.compact.compressed.wasm
// --pallet
// pallet_example_mbm
// --extrinsic
//
// --template
// substrate/.maintain/frame-weight-template.hbs
// --output
// substrate/frame/examples/multi-block-migrations/src/migrations/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_example_mbm`.
pub trait WeightInfo {
    fn player_season_configs_step() -> Weight;
    fn season_stats_step() -> Weight;
    fn avatar_step() -> Weight;
    fn trade_stats_map_cleanup_step() -> Weight;
}

/// Weights run with the recommended hardware on the Bajun Parachain.
pub struct BajunWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for BajunWeight<T> {
    /// Storage: `AwesomeAvatars::PlayerSeasonConfigs` (r:2 w:1)
    /// Proof: `AwesomeAvatars::PlayerSeasonConfigs` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
    /// Storage: `AwesomeAvatars::TradeStatsMap` (r:0 w:1)
    /// Proof: `AwesomeAvatars::TradeStatsMap` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
    fn player_season_configs_step() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `156`
        //  Estimated: `6048`
        // Minimum execution time: 26_000_000 picoseconds.
        Weight::from_parts(57_200_000, 0)
            .saturating_add(Weight::from_parts(0, 6048))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `AwesomeAvatars::SeasonStats` (r:2 w:1)
    /// Proof: `AwesomeAvatars::SeasonStats` (`max_values`: None, `max_size`: Some(54), added: 2529, mode: `MaxEncodedLen`)
    /// Storage: `AwesomeAvatars::TradeStatsMap` (r:1 w:1)
    /// Proof: `AwesomeAvatars::TradeStatsMap` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
    fn season_stats_step() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `199`
        //  Estimated: `6048`
        // Minimum execution time: 40_200_000 picoseconds.
        Weight::from_parts(46_000_000, 0)
            .saturating_add(Weight::from_parts(0, 6048))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `AwesomeAvatars::Avatars` (r:2 w:1)
    /// Proof: `AwesomeAvatars::Avatars` (`max_values`: None, `max_size`: Some(177), added: 2652, mode: `MaxEncodedLen`)
    fn avatar_step() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `168`
        //  Estimated: `6294`
        // Minimum execution time: 31_400_000 picoseconds.
        Weight::from_parts(32_900_000, 0)
            .saturating_add(Weight::from_parts(0, 6294))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `AwesomeAvatars::TradeStatsMap` (r:2 w:1)
    /// Proof: `AwesomeAvatars::TradeStatsMap` (`max_values`: None, `max_size`: Some(42), added: 2517, mode: `MaxEncodedLen`)
    fn trade_stats_map_cleanup_step() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `136`
        //  Estimated: `6024`
        // Minimum execution time: 25_900_000 picoseconds.
        Weight::from_parts(32_200_000, 0)
            .saturating_add(Weight::from_parts(0, 6024))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}