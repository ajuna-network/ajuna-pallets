
//! Autogenerated weights for pallet_ajuna_awesome_avatars
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-14, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `weight-calculation`, CPU: `DO-Regular`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/bajun-para
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-ajuna-awesome-avatars
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/ajuna-awesome-avatars/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_ajuna_awesome_avatars.
pub trait WeightInfo {
    fn set_collection_id() -> Weight;
    fn lock_asset() -> Weight;
    fn unlock_asset() -> Weight;
    fn set_service_account() -> Weight;
    fn prepare_asset() -> Weight;
    fn unprepare_asset() -> Weight;
    fn prepare_ipfs() -> Weight;
}

/// Weights for pallet_ajuna_awesome_avatars using the Substrate node and recommended hardware.
pub struct AjunaWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for AjunaWeight<T> {
    /// Storage: AwesomeAvatars Organizer (r:1 w:0)
    /// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars CollectionId (r:0 w:1)
    /// Proof: AwesomeAvatars CollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    fn set_collection_id() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `96`
        //  Estimated: `1517`
        // Minimum execution time: 58_048_000 picoseconds.
        Weight::from_parts(61_852_000, 1517)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: AwesomeAvatars Avatars (r:1 w:1)
    /// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Trade (r:1 w:0)
    /// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(50), added: 2525, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
    /// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(15), added: 510, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars LockedAvatars (r:1 w:1)
    /// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Preparation (r:1 w:1)
    /// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Owners (r:2 w:2)
    /// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6436), added: 8911, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars PlayerSeasonConfigs (r:1 w:0)
    /// Proof: AwesomeAvatars PlayerSeasonConfigs (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars CollectionId (r:1 w:0)
    /// Proof: AwesomeAvatars CollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: Nft Item (r:1 w:1)
    /// Proof: Nft Item (max_values: None, max_size: Some(186), added: 2661, mode: MaxEncodedLen)
    /// Storage: Nft Collection (r:1 w:1)
    /// Proof: Nft Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
    /// Storage: Nft CollectionConfigOf (r:1 w:0)
    /// Proof: Nft CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
    /// Storage: Nft ItemConfigOf (r:1 w:1)
    /// Proof: Nft ItemConfigOf (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    /// Storage: Nft Attribute (r:6 w:6)
    /// Proof: Nft Attribute (max_values: None, max_size: Some(418), added: 2893, mode: MaxEncodedLen)
    /// Storage: NftTransfer NftStatuses (r:0 w:1)
    /// Proof: NftTransfer NftStatuses (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
    /// Storage: Nft Account (r:0 w:1)
    /// Proof: Nft Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
    /// The range of component `n` is `[1, 200]`.
    fn lock_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1415 + n * (34 ±0)`
        //  Estimated: `18812`
        // Minimum execution time: 432_000_000 picoseconds.
        Weight::from_parts(932_672_427, 18812)
            // Standard Error: 170_806
            .saturating_add(Weight::from_parts(555_196, 0))
            .saturating_add(T::DbWeight::get().reads(20_u64))
            .saturating_add(T::DbWeight::get().writes(17_u64))
    }
    /// Storage: AwesomeAvatars Avatars (r:1 w:1)
    /// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Trade (r:1 w:0)
    /// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(50), added: 2525, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
    /// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(15), added: 510, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars LockedAvatars (r:1 w:1)
    /// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Owners (r:2 w:2)
    /// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6436), added: 8911, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars PlayerSeasonConfigs (r:1 w:0)
    /// Proof: AwesomeAvatars PlayerSeasonConfigs (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars CollectionId (r:1 w:0)
    /// Proof: AwesomeAvatars CollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: NftTransfer NftStatuses (r:1 w:1)
    /// Proof: NftTransfer NftStatuses (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
    /// Storage: Nft Attribute (r:6 w:6)
    /// Proof: Nft Attribute (max_values: None, max_size: Some(418), added: 2893, mode: MaxEncodedLen)
    /// Storage: Nft Collection (r:1 w:1)
    /// Proof: Nft Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
    /// Storage: Nft ItemConfigOf (r:1 w:1)
    /// Proof: Nft ItemConfigOf (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
    /// Storage: Nft Item (r:1 w:1)
    /// Proof: Nft Item (max_values: None, max_size: Some(186), added: 2661, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    /// Storage: Nft ItemMetadataOf (r:1 w:0)
    /// Proof: Nft ItemMetadataOf (max_values: None, max_size: Some(247), added: 2722, mode: MaxEncodedLen)
    /// Storage: Nft Account (r:0 w:1)
    /// Proof: Nft Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
    /// Storage: Nft ItemPriceOf (r:0 w:1)
    /// Proof: Nft ItemPriceOf (max_values: None, max_size: Some(117), added: 2592, mode: MaxEncodedLen)
    /// Storage: Nft ItemAttributesApprovalsOf (r:0 w:1)
    /// Proof: Nft ItemAttributesApprovalsOf (max_values: None, max_size: Some(389), added: 2864, mode: MaxEncodedLen)
    /// Storage: Nft PendingSwapOf (r:0 w:1)
    /// Proof: Nft PendingSwapOf (max_values: None, max_size: Some(127), added: 2602, mode: MaxEncodedLen)
    /// The range of component `n` is `[1, 200]`.
    fn unlock_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2202 + n * (34 ±0)`
        //  Estimated: `18812`
        // Minimum execution time: 423_878_000 picoseconds.
        Weight::from_parts(910_723_452, 18812)
            .saturating_add(T::DbWeight::get().reads(20_u64))
            .saturating_add(T::DbWeight::get().writes(19_u64))
    }
    /// Storage: AwesomeAvatars ServiceAccount (r:0 w:1)
    /// Proof: AwesomeAvatars ServiceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    fn set_service_account() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 19_969_000 picoseconds.
        Weight::from_parts(20_751_000, 0)
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: AwesomeAvatars Avatars (r:1 w:0)
    /// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Trade (r:1 w:0)
    /// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(50), added: 2525, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
    /// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(15), added: 510, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
    /// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Preparation (r:1 w:1)
    /// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars ServiceAccount (r:1 w:0)
    /// Proof: AwesomeAvatars ServiceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Seasons (r:1 w:0)
    /// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1667), added: 4142, mode: MaxEncodedLen)
    /// Storage: System Account (r:2 w:2)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    fn prepare_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1861`
        //  Estimated: `6196`
        // Minimum execution time: 177_929_000 picoseconds.
        Weight::from_parts(183_872_000, 6196)
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: AwesomeAvatars Avatars (r:1 w:0)
    /// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
    /// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(15), added: 510, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Preparation (r:1 w:1)
    /// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    fn unprepare_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `344`
        //  Estimated: `3638`
        // Minimum execution time: 42_265_000 picoseconds.
        Weight::from_parts(45_537_000, 3638)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: AwesomeAvatars ServiceAccount (r:1 w:0)
    /// Proof: AwesomeAvatars ServiceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
    /// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(15), added: 510, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Preparation (r:1 w:1)
    /// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    fn prepare_ipfs() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `318`
        //  Estimated: `3579`
        // Minimum execution time: 40_493_000 picoseconds.
        Weight::from_parts(41_931_000, 3579)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    /// Storage: AwesomeAvatars Organizer (r:1 w:0)
    /// Proof: AwesomeAvatars Organizer (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars CollectionId (r:0 w:1)
    /// Proof: AwesomeAvatars CollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    fn set_collection_id() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `96`
        //  Estimated: `1517`
        // Minimum execution time: 58_048_000 picoseconds.
        Weight::from_parts(61_852_000, 1517)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: AwesomeAvatars Avatars (r:1 w:1)
    /// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Trade (r:1 w:0)
    /// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(50), added: 2525, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
    /// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(15), added: 510, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars LockedAvatars (r:1 w:1)
    /// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Preparation (r:1 w:1)
    /// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Owners (r:2 w:2)
    /// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6436), added: 8911, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars PlayerSeasonConfigs (r:1 w:0)
    /// Proof: AwesomeAvatars PlayerSeasonConfigs (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars CollectionId (r:1 w:0)
    /// Proof: AwesomeAvatars CollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: Nft Item (r:1 w:1)
    /// Proof: Nft Item (max_values: None, max_size: Some(186), added: 2661, mode: MaxEncodedLen)
    /// Storage: Nft Collection (r:1 w:1)
    /// Proof: Nft Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
    /// Storage: Nft CollectionConfigOf (r:1 w:0)
    /// Proof: Nft CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
    /// Storage: Nft ItemConfigOf (r:1 w:1)
    /// Proof: Nft ItemConfigOf (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    /// Storage: Nft Attribute (r:6 w:6)
    /// Proof: Nft Attribute (max_values: None, max_size: Some(418), added: 2893, mode: MaxEncodedLen)
    /// Storage: NftTransfer NftStatuses (r:0 w:1)
    /// Proof: NftTransfer NftStatuses (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
    /// Storage: Nft Account (r:0 w:1)
    /// Proof: Nft Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
    /// The range of component `n` is `[1, 200]`.
    fn lock_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1415 + n * (34 ±0)`
        //  Estimated: `18812`
        // Minimum execution time: 432_000_000 picoseconds.
        Weight::from_parts(20_751_000, 0)
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: AwesomeAvatars Avatars (r:1 w:1)
    /// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Trade (r:1 w:0)
    /// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(50), added: 2525, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
    /// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(15), added: 510, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars LockedAvatars (r:1 w:1)
    /// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Owners (r:2 w:2)
    /// Proof: AwesomeAvatars Owners (max_values: None, max_size: Some(6436), added: 8911, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars PlayerSeasonConfigs (r:1 w:0)
    /// Proof: AwesomeAvatars PlayerSeasonConfigs (max_values: None, max_size: Some(4063), added: 6538, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars CollectionId (r:1 w:0)
    /// Proof: AwesomeAvatars CollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: NftTransfer NftStatuses (r:1 w:1)
    /// Proof: NftTransfer NftStatuses (max_values: None, max_size: Some(37), added: 2512, mode: MaxEncodedLen)
    /// Storage: Nft Attribute (r:6 w:6)
    /// Proof: Nft Attribute (max_values: None, max_size: Some(418), added: 2893, mode: MaxEncodedLen)
    /// Storage: Nft Collection (r:1 w:1)
    /// Proof: Nft Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
    /// Storage: Nft ItemConfigOf (r:1 w:1)
    /// Proof: Nft ItemConfigOf (max_values: None, max_size: Some(76), added: 2551, mode: MaxEncodedLen)
    /// Storage: Nft Item (r:1 w:1)
    /// Proof: Nft Item (max_values: None, max_size: Some(186), added: 2661, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    /// Storage: Nft ItemMetadataOf (r:1 w:0)
    /// Proof: Nft ItemMetadataOf (max_values: None, max_size: Some(247), added: 2722, mode: MaxEncodedLen)
    /// Storage: Nft Account (r:0 w:1)
    /// Proof: Nft Account (max_values: None, max_size: Some(116), added: 2591, mode: MaxEncodedLen)
    /// Storage: Nft ItemPriceOf (r:0 w:1)
    /// Proof: Nft ItemPriceOf (max_values: None, max_size: Some(117), added: 2592, mode: MaxEncodedLen)
    /// Storage: Nft ItemAttributesApprovalsOf (r:0 w:1)
    /// Proof: Nft ItemAttributesApprovalsOf (max_values: None, max_size: Some(389), added: 2864, mode: MaxEncodedLen)
    /// Storage: Nft PendingSwapOf (r:0 w:1)
    /// Proof: Nft PendingSwapOf (max_values: None, max_size: Some(127), added: 2602, mode: MaxEncodedLen)
    /// The range of component `n` is `[1, 200]`.
    fn unlock_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2202 + n * (34 ±0)`
        //  Estimated: `18812`
        // Minimum execution time: 423_878_000 picoseconds.
        Weight::from_parts(20_751_000, 0)
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: AwesomeAvatars ServiceAccount (r:0 w:1)
    /// Proof: AwesomeAvatars ServiceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    fn set_service_account() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 19_969_000 picoseconds.
        Weight::from_parts(20_751_000, 0)
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: AwesomeAvatars Avatars (r:1 w:0)
    /// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Trade (r:1 w:0)
    /// Proof: AwesomeAvatars Trade (max_values: None, max_size: Some(50), added: 2525, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
    /// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(15), added: 510, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars LockedAvatars (r:1 w:0)
    /// Proof: AwesomeAvatars LockedAvatars (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Preparation (r:1 w:1)
    /// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars ServiceAccount (r:1 w:0)
    /// Proof: AwesomeAvatars ServiceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Seasons (r:1 w:0)
    /// Proof: AwesomeAvatars Seasons (max_values: None, max_size: Some(1667), added: 4142, mode: MaxEncodedLen)
    /// Storage: System Account (r:2 w:2)
    /// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
    fn prepare_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1861`
        //  Estimated: `6196`
        // Minimum execution time: 177_929_000 picoseconds.
        Weight::from_parts(183_872_000, 6196)
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
    /// Storage: AwesomeAvatars Avatars (r:1 w:0)
    /// Proof: AwesomeAvatars Avatars (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
    /// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(15), added: 510, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Preparation (r:1 w:1)
    /// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    fn unprepare_asset() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `344`
        //  Estimated: `3638`
        // Minimum execution time: 42_265_000 picoseconds.
        Weight::from_parts(45_537_000, 3638)
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    /// Storage: AwesomeAvatars ServiceAccount (r:1 w:0)
    /// Proof: AwesomeAvatars ServiceAccount (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars GlobalConfigs (r:1 w:0)
    /// Proof: AwesomeAvatars GlobalConfigs (max_values: Some(1), max_size: Some(15), added: 510, mode: MaxEncodedLen)
    /// Storage: AwesomeAvatars Preparation (r:1 w:1)
    /// Proof: AwesomeAvatars Preparation (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    fn prepare_ipfs() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `318`
        //  Estimated: `3579`
        // Minimum execution time: 40_493_000 picoseconds.
        Weight::from_parts(41_931_000, 3579)
            .saturating_add(RocksDbWeight::get().reads(3_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
}
